#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#include "semlib.h"


int total_passengers = 0;
#define CCR_DECLARE(label) \
          bsem label_R_mtx, label_R_q1, label_R_q2; \
          int label_R_n1=0, label_R_n2=0;
           
          
#define CCR_INIT(label) \
          mybsem_init(&label_R_mtx,1); mybsem_init(&label_R_q1,0);mybsem_init(&label_R_q2,0);

#define CCR_EXEC(label, cond, body) \
          down(&label_R_mtx); \
          while (!cond)  { \
            label_R_n1++; \
            if (label_R_n2 > 0) { \
              label_R_n2--; \
              printf("before_0th_up\n");up(&label_R_q2);printf("after_0th_down\n"); \
            } \
            else { \
              up(&label_R_mtx); \
            } \
            printf("before_down\n");down(&label_R_q1);printf("after_down\n"); \
            label_R_n2++; \
            if (label_R_n1 > 0) { \
              label_R_n1--; \
              up(&label_R_q1); \
            } \
            else { \
              up(&label_R_q2); \
            } \
            down(&label_R_q2); \
          } \
          body \
          if (label_R_n1 > 0) { \
            label_R_n1--; \
            printf("before_1st_up\n");up(&label_R_q1);printf("after_1st_up\n"); \
          } \
          else if (label_R_n2 > 0) { \
            label_R_n2--; \
            printf("before_2nd_up\n");up(&label_R_q2);printf("after_2nd_up\n"); \
          } \
          else { \
            up(&label_R_mtx); \
          }          


CCR_DECLARE(label);

void *poulo(void *args)  {
   total_passengers++;
   printf("Thread %d: Waiting to get in CS...\n", *(int *)args );
   

   CCR_EXEC(labels, (total_passengers <= 5), printf("Thread %d: Inside the CS\n ",*(int *)args); /*sleep(1)*/);
   
   total_passengers--;
   printf("Thread %d: Just its out of CS...Total passengers: %d\n", *(int *)args, total_passengers );
  
  return NULL;
}

int main(int argc, char *argv[]) {
  int i = 0;
  pthread_t tid[20];

  CCR_INIT(label);
  
  for (i = 0; i < 20; i++)  {
    //sleep(1);
    pthread_create(&tid[i], NULL, (void *)poulo, (void *)&i);
  }
  
  
  for (i = 0; i < 20; i++)  {
    pthread_join(tid[i], NULL);
  }

 
  return 0;
}